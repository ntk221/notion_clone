import React from 'react'
import { ChakraProvider, Flex, Box } from "@chakra-ui/react";
import { Outlet, useNavigate }from "react-router-dom"
import { useEffect }from "react";
import axios from "axios";

const AuthLayout = () => {
  const navigate = useNavigate();

  useEffect(() => {
    const checkAuth = async () => {
      try {
        const response = await axios.get("/check-auth", {
          headers: {
            Authorization: `Bearer ${localStorage.getItem("token")}`,
          },
        });
        if (response.status === 200) {
          navigate("/dashboard");
        } 
      } catch (error) {
        console.error(error);
      }
    };
    checkAuth()
  }, [navigate]);

  return (
    <ChakraProvider>     
      <Flex height="100vh" alignItems="center" justifyContent="center">
        <Box maxW="300px" w="full" px="6" py="8" rounded="lg" boxShadow="lg">
          <Outlet />
        </Box>
      </Flex>
    </ChakraProvider>
  );
}

export default AuthLayoutimport React from "react";
import { ChakraProvider, Box } from "@chakra-ui/react";
import { Outlet } from "react-router-dom";
import SideBar from "../SideBar";
import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { fetchArticles } from "../../api/articlesApi";
import getUserData from "../../api/userApi";
import { IArticle } from "../../types/articleType";
import { ArticleContext } from "../../contexts/contexts";
import { UserContext } from "../../contexts/contexts";

const AppLayout = () => {

  const [userData, setUserData] = useState({
    email: "",
    username: "",
    id: "",
  });
  const [userArticles, setUserArticles] = useState<IArticle[]>([]);
  const [selectedArticle, setSelectedArticle] = useState<IArticle | null>(null);
  const navigate = useNavigate();

  // ログインしているユーザーの情報を取得して，stateにセットする
  useEffect(() => {
    const token = localStorage.getItem("token");
    if (token) {
      const fetchUserData = async () => {
        const userData = await getUserData();
        console.log(userData);
        setUserData(userData);
      };
      fetchUserData();
    } else {
      navigate("/");
    }
  }, []);

  // ユーザーの記事一覧を取得して，stateにセットする
  useEffect(() => {
    const getArticles = async () => {
      try {
        const articles : IArticle[] = await fetchArticles(userData.id); // fetchArticlesを呼び出し
        setUserArticles(articles.sort((a, b) => new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime())); // 取得した記事一覧をstateにセット
      } catch (error) {
        console.log(error);
      }
    };
    if (userData.id) {
      getArticles();
    }
  }, [userData]);

  return (
    <ChakraProvider>
      <Box display={"flex"} height="100vh" >
        <ArticleContext.Provider
          value={{
            userArticles,
            selectedArticle,
            setSelectedArticle,
            setUserArticles,
          }}
        >
          <UserContext.Provider value={userData}>
            <SideBar username={userData.username} userArticles={userArticles} />
            <Outlet />
          </UserContext.Provider>
        </ArticleContext.Provider>
      </Box>
    </ChakraProvider>
  );
};

export default AppLayout;
import React from "react";
import { Box, Flex, Text, VStack, Stack, Button } from "@chakra-ui/react";
import { IArticle } from "../types/articleType";
import { useNavigate } from "react-router-dom";
import { useContext } from "react";
import { DeleteIcon, SmallAddIcon } from "@chakra-ui/icons";
import { IconButton } from "@chakra-ui/react";
import { FiLogOut } from "react-icons/fi";
import { deleteArticle } from "../api/articlesApi";
import { createArticle } from "../api/articlesApi";
import { UserContext, ArticleContext } from "../contexts/contexts";

type SideBarProps = {
  username: string;
  userArticles: IArticle[];
};

const SideBar: React.FC<SideBarProps> = ({ username, userArticles }) => {
  const navigate = useNavigate();

  const { setSelectedArticle, setUserArticles } = useContext(ArticleContext);

  const handleArticleClick = (article: IArticle) => {
    setSelectedArticle(article);
    setUserArticles([
      article,
      ...userArticles.filter((a) => a._id !== article._id),
    ]);
    navigate(`/dashboard/article/${article._id}`);
  };

  const handleDeleteClick = (article: IArticle) => {
    setUserArticles(userArticles.filter((a) => a._id !== article._id));
    setSelectedArticle(null);
    deleteArticle(article);
    navigate(`/dashboard`);
  };

  const handleLogout = () => {
    localStorage.removeItem("token");
    navigate(`/`);
  };

  return (
    <Box minH="100vh" borderRight="1px" borderColor="gray.200" px="4" style={{ flexShrink: 0, width: "200px" }}>
      <Flex alignItems="left" justifyContent={"space-between"} mb="2" mt="3">
        <Text fontSize="md" fontWeight="bold">
          {username}
        </Text>
        <IconButton
          icon={<FiLogOut />}
          variant="ghost"
          colorScheme="gray"
          aria-label="Plus"
          w={5}
          size="s"
          onClick={() => handleLogout()}
        />
      </Flex>
      <Stack>
        {userArticles.length > 0 ? (
          <UserArticleList
            articles={userArticles}
            handleArticleClick={handleArticleClick}
            handleDeleteClick={handleDeleteClick}
          />
        ) : (
          <Text color="gray.400">No notes yet.</Text>
        )}
      </Stack>
    </Box>
  );
};

export default SideBar;

type UserArticleListProps = {
  articles: IArticle[];
  handleArticleClick: (article: IArticle) => void;
  handleDeleteClick: (article: IArticle) => void;
};

const UserArticleList: React.FC<UserArticleListProps> = ({
  articles,
  handleArticleClick,
  handleDeleteClick,
}) => {
  const user = useContext(UserContext);
  const { setUserArticles } = useContext(ArticleContext);

  const handleCreateArticle = async () => {
    try {
      const response = await createArticle("", "", user.id);

      await setUserArticles((prev) => [response, ...prev]);
    } catch (error) {
      console.log(error);
    }
  };

  return (
    <Box
      maxW="200px"
      w="full"
      minH="100vh"
      px="4"
    >
      <Flex alignItems="left" justifyContent="space-between" mt="4">
        <Box
          flex="1"
          textAlign={"center"}
          fontSize="sm"
          fontWeight="bold"
          mb="4"
          color={"gray400"}
        >
          記事一覧
        </Box>
        <IconButton
          icon={<SmallAddIcon w={5} h={5} opacity="0.80" color={"gray.600"} />}
          variant="ghost"
          colorScheme="gray"
          aria-label="Plus"
          size="xs"
          onClick={() => handleCreateArticle()}
        />
      </Flex>
      <VStack spacing={0.8} align="stretch">
        {articles.map((article) => (
          <Flex key={article._id} alignItems="center">
            <Button
              key={article._id}
              size="md"
              fontSize={"sm"}
              variant="ghost"
              colorScheme="blue"
              onClick={() => handleArticleClick(article)}
              style={{ wordWrap: "break-word" }}
              whiteSpace="normal"
              flex="1"
            >
              {article.title ? article.title : "無題"}
            </Button>
            <IconButton
              icon={<DeleteIcon opacity="0.16" />}
              variant="ghost"
              colorScheme="gray"
              aria-label="Close"
              size="xs"
              onClick={() => handleDeleteClick(article)}
            />
          </Flex>
        ))}
      </VStack>
    </Box>
  );
};
import React from 'react'

const LoginForm = () => {
  return (
    <div>LoginForm</div>
  )
}

export default LoginForm
import React, { useContext } from "react";
import { Box, Button } from "@chakra-ui/react";
import { useNavigate } from "react-router-dom";
import { ArticleContext, UserContext } from "../../contexts/contexts";
import { createArticle } from "../../api/articlesApi";

const Home: React.FC = () => {
  const navigate = useNavigate();
  const user = useContext(UserContext);
  const { setSelectedArticle, setUserArticles } = useContext(ArticleContext);


  const handleCreateArticle = async () => {
    try {
      const response = await createArticle("","", user.id);

      await setSelectedArticle(response);

      const addedArticle = response;

      await setUserArticles((prev) => [...prev, addedArticle]);

      navigate(`/dashboard/article/${response._id}`);
    } catch (error) {
      console.log(error);
    }
  };

  return (
    <Box
      display="flex"
      alignItems="center"
      justifyContent="center"
      w="100%"
    >
      <Button onClick={handleCreateArticle}>新規記事を作成</Button>
    </Box>
  );
};

export default Home;
import React, { useContext } from "react";
import { ArticleContext } from "../../contexts/contexts";
import { useState } from "react";
import { Box, Button, FormControl, Input, Textarea } from "@chakra-ui/react";
import { useEffect } from "react";
import { IArticle } from "../../types/articleType";
import { updateArticle } from "../../api/articlesApi";

const Article = () => {
  const { selectedArticle, userArticles, setSelectedArticle, setUserArticles } =
    useContext(ArticleContext);
  const [editTitle, setEditTitle] = useState(selectedArticle?.title || "");
  const [editBody, setEditBody] = useState(selectedArticle?.body || "");

  useEffect(() => {
    if (selectedArticle) {
      setEditTitle(selectedArticle.title);
      setEditBody(selectedArticle.body);
    }
  }, [selectedArticle]);

  if (!selectedArticle) {
    return <div>No article selected</div>;
  }

  const handleUpdate = async (event: React.FormEvent<HTMLDivElement>) => {
    event.preventDefault();

    const response = await updateArticle(editTitle, editBody, selectedArticle);

    if (!response) {
      return;
    }

    const updatedArticles = userArticles.map((article) => {
      if (article._id === selectedArticle._id) {
        return {
          ...article,
          title: editTitle,
          body: editBody,
        };
      }
      return article;
    }) as IArticle[];

    setUserArticles(updatedArticles);
    setSelectedArticle(response.data);
  };

  return (
    <Box fontSize="xl" mt="20" pl="20" w="70%" mx="auto">
      <FormControl as="form" onSubmit={handleUpdate}>
        <Box width="100%">
          <Input
            type="text"
            fontSize={"4xl"}
            fontWeight="bold"
            id="title"
            name="title"
            value={editTitle}
            onChange={(event) => setEditTitle(event.target.value)}
            placeholder="Title"
            variant="unstyled"
            size="xl"
            borderColor="blue.400"
          />
        </Box>
        <Box width="100%">
          <Textarea
            id="body"
            name="body"
            value={editBody}
            onChange={(event) => setEditBody(event.target.value)}
            rows={10}
            placeholder="Body"
            size="xl"
            fontWeight="normal"
            fontSize={"lg"}
            variant="unstyled"
            resize="vertical"
            h="200px"
            borderColor="blue.400"
          ></Textarea>
        </Box>
        <br />
        <Button type="submit">Update</Button>
      </FormControl>
    </Box>
  );
};

export default Article;
import React, { useState, FormEvent } from "react";
import axios, { formToJSON } from "axios";
import {
  Box,
  Button,
  FormControl,
  FormLabel,
  Input,
  VStack,
  Text,
  Link,
} from "@chakra-ui/react";
import { useNavigate } from "react-router-dom";

const SignupForm: React.FC = () => {
  const [formData, setFormData] = useState({
    username: "",
    password: "",
    email: "",
  });

  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = event.target;
    setFormData((prevFormData) => ({
      ...prevFormData,
      [name]: value,
    }));
  };

  const navigate = useNavigate();

  const [errorMessage, setErrorMessage] = useState<string>("");

  // ユーザーを新規登録して，サーバーが返したJWTをブラウザのストレージに保存する
  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    const form = event.currentTarget;
    if (!form) return;
    const formData = new FormData(form);
    const jsonData = formToJSON(formData);
    try {
      const response = await axios.post("/signup", jsonData, {
        headers: { "Content-type": "application/json" },
      });
      const token = response.data.token;
      localStorage.setItem("token", token);
      console.log(response);
      navigate("/dashboard");
    } catch (error) {
      if (axios.isAxiosError(error)) {
        console.error(error.response?.data.error);
        setErrorMessage(error.response?.data.error);
      } else {
        console.log(error);
      }
    }
  };

  return (
    <Box>
      {errorMessage && (
        <Text color="red" mb="4">
          {errorMessage}
        </Text>
      )}
      <form onSubmit={handleSubmit}>
        <VStack spacing="4">
          <FormControl id="username">
            <FormLabel>ユーザー名</FormLabel>
            <Input
              type="text"
              name="username"
              value={formData.username}
              onChange={handleInputChange}
            />
          </FormControl>
          <FormControl id="email">
            <FormLabel>Eメール</FormLabel>
            <Input
              type="email"
              name="email"
              value={formData.email}
              onChange={handleInputChange}
            />
          </FormControl>
          <FormControl id="password">
            <FormLabel>パスワード</FormLabel>
            <Input
              type="password"
              name="password"
              value={formData.password}
              onChange={handleInputChange}
            />
          </FormControl>
          <Button type="submit" colorScheme="blue" w="full">
            登録する
          </Button>
        </VStack>
      </form>
      <Text mt="4">
        アカウントをお持ちですか？{" "}
        <Link href="/login" color="blue">
          ログイン
        </Link>
      </Text>
    </Box>
  );
};

export default SignupForm;
